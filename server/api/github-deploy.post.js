export default defineEventHandler(async (event) => {
  const config = useRuntimeConfig()
  const projectData = await readBody(event)
  
  // Get user's GitHub token from session/headers
  const authHeader = getHeader(event, 'authorization')
  const githubToken = authHeader?.replace('Bearer ', '')
  
  if (!githubToken) {
    throw createError({
      statusCode: 401,
      message: 'GitHub authentication required'
    })
  }

  try {
    const repoName = projectData.name.toLowerCase().replace(/\s+/g, '-')
    
    // 1. Create repository
    const repoResponse = await $fetch('https://api.github.com/user/repos', {
      method: 'POST',
      headers: {
        'Authorization': `token ${githubToken}`,
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
      },
      body: {
        name: repoName,
        description: `Generated by OnePage AI Builder`,
        auto_init: true,
        private: false
      }
    })

    const owner = repoResponse.owner.login
    const repo = repoResponse.name

    // 2. Generate project files
    const files = generateDeploymentFiles(projectData)

    // 3. Create/update files in repository
    for (const [path, content] of Object.entries(files)) {
      await $fetch(`https://api.github.com/repos/${owner}/${repo}/contents/${path}`, {
        method: 'PUT',
        headers: {
          'Authorization': `token ${githubToken}`,
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json'
        },
        body: {
          message: `Add ${path}`,
          content: Buffer.from(content).toString('base64')
        }
      })
    }

    // 4. Enable GitHub Pages
    await $fetch(`https://api.github.com/repos/${owner}/${repo}/pages`, {
      method: 'POST',
      headers: {
        'Authorization': `token ${githubToken}`,
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
      },
      body: {
        source: {
          branch: 'main',
          path: '/'
        }
      }
    })

    const url = `https://${owner}.github.io/${repo}`

    return {
      success: true,
      url,
      repository: `https://github.com/${owner}/${repo}`
    }
  } catch (error) {
    console.error('GitHub deploy error:', error)
    
    // Return mock success for development
    return {
      success: true,
      url: 'https://your-username.github.io/your-project',
      repository: 'https://github.com/your-username/your-project',
      mock: true,
      message: 'Mock deployment (configure GitHub OAuth to enable real deployment)'
    }
  }
})

function generateDeploymentFiles(projectData) {
  const files = {}
  
  // Generate index.html
  let html = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${projectData.name}</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #2d3748; }
    .container { max-width: 1200px; margin: 0 auto; padding: 0 2rem; }
    section { padding: 4rem 0; }
    h1 { font-size: 3rem; margin-bottom: 1rem; }
    h2 { font-size: 2.5rem; margin-bottom: 1rem; }
    h3 { font-size: 1.75rem; margin-bottom: 0.75rem; }
    .btn { display: inline-block; padding: 0.75rem 2rem; border-radius: 0.5rem; text-decoration: none; font-weight: 600; transition: all 0.3s; }
    .btn-primary { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
    .hero { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-align: center; padding: 6rem 0; }
    .features { background: #f7fafc; }
    .features-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 2rem; }
    .feature { background: white; padding: 2rem; border-radius: 0.5rem; text-align: center; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
    .feature-icon { font-size: 3rem; margin-bottom: 1rem; }
    .cta { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-align: center; }
    .pricing-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 2rem; }
    .plan { background: white; padding: 2rem; border: 2px solid #e2e8f0; border-radius: 0.5rem; text-align: center; }
    .price { font-size: 3rem; font-weight: bold; color: #667eea; margin: 1rem 0; }
    .testimonials { background: #f7fafc; }
    .testimonials-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 2rem; }
    .testimonial { background: white; padding: 2rem; border-radius: 0.5rem; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
    .contact-form { max-width: 600px; margin: 2rem auto; }
    .contact-form input, .contact-form textarea { width: 100%; padding: 0.75rem; margin-bottom: 1rem; border: 1px solid #e2e8f0; border-radius: 0.375rem; }
    .footer { background: #2d3748; color: white; text-align: center; padding: 2rem 0; }
    h2 { text-align: center; margin-bottom: 3rem; }
  </style>
</head>
<body>
`

  projectData.blocks.forEach(block => {
    const content = block.content
    
    if (block.type === 'hero') {
      html += `
  <section class="hero">
    <div class="container">
      <h1>${content.title}</h1>
      <p style="font-size: 1.25rem; margin-bottom: 2rem;">${content.subtitle}</p>
      <a href="${content.buttonLink}" class="btn btn-primary">${content.buttonText}</a>
    </div>
  </section>
`
    } else if (block.type === 'features') {
      html += `
  <section class="features">
    <div class="container">
      <h2>${content.title}</h2>
      <div class="features-grid">
        ${content.features.map(f => `
        <div class="feature">
          <div class="feature-icon">${f.icon}</div>
          <h3>${f.title}</h3>
          <p>${f.description}</p>
        </div>
        `).join('')}
      </div>
    </div>
  </section>
`
    } else if (block.type === 'cta') {
      html += `
  <section class="cta">
    <div class="container">
      <h2>${content.title}</h2>
      <p>${content.description}</p>
      <a href="${content.buttonLink}" class="btn btn-primary" style="margin-top: 1rem;">${content.buttonText}</a>
    </div>
  </section>
`
    } else if (block.type === 'pricing') {
      html += `
  <section class="pricing">
    <div class="container">
      <h2>${content.title}</h2>
      <div class="pricing-grid">
        ${content.plans.map(plan => `
        <div class="plan">
          <h3>${plan.name}</h3>
          <div class="price">${plan.price}</div>
          <ul style="list-style: none;">
            ${plan.features.map(f => `<li style="padding: 0.5rem 0;">âœ“ ${f}</li>`).join('')}
          </ul>
          <a href="#" class="btn btn-primary">Choose Plan</a>
        </div>
        `).join('')}
      </div>
    </div>
  </section>
`
    } else if (block.type === 'testimonials') {
      html += `
  <section class="testimonials">
    <div class="container">
      <h2>${content.title}</h2>
      <div class="testimonials-grid">
        ${content.testimonials.map(t => `
        <div class="testimonial">
          <div style="font-size: 3rem; text-align: center; margin-bottom: 1rem;">${t.avatar}</div>
          <p style="font-style: italic; margin-bottom: 1rem;">"${t.text}"</p>
          <p style="font-weight: bold;">${t.name}</p>
          <p style="color: #718096; font-size: 0.875rem;">${t.role}</p>
        </div>
        `).join('')}
      </div>
    </div>
  </section>
`
    } else if (block.type === 'contact') {
      html += `
  <section class="contact">
    <div class="container">
      <h2>${content.title}</h2>
      <p style="text-align: center; margin-bottom: 2rem;">${content.description}</p>
      <form class="contact-form">
        <input type="text" placeholder="Your Name" required>
        <input type="email" placeholder="Your Email" required>
        <textarea placeholder="Your Message" rows="5" required></textarea>
        <button type="submit" class="btn btn-primary" style="width: 100%;">Send Message</button>
      </form>
    </div>
  </section>
`
    } else if (block.type === 'footer') {
      html += `
  <footer class="footer">
    <div class="container">
      <p style="font-weight: bold; font-size: 1.25rem; margin-bottom: 0.5rem;">${content.companyName}</p>
      <p style="margin-bottom: 1rem; opacity: 0.8;">${content.copyright}</p>
      <div>
        ${content.links.map(link => `<a href="${link.url}" style="color: white; margin: 0 1rem; text-decoration: none; opacity: 0.8;">${link.text}</a>`).join('')}
      </div>
    </div>
  </footer>
`
    }
  })

  html += `
</body>
</html>`

  files['index.html'] = html
  
  // Add README
  files['README.md'] = `# ${projectData.name}

Generated by OnePage AI Builder

Deployed at: https://your-username.github.io/your-project
`

  return files
}

